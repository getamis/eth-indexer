// Code generated by mockery v1.0.0
package mocks

import common "github.com/ethereum/go-ethereum/common"
import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/getamis/eth-indexer/model"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// BatchUpdateERC20BlockNumber provides a mock function with given fields: ctx, blockNumber, addrs
func (_m *Store) BatchUpdateERC20BlockNumber(ctx context.Context, blockNumber int64, addrs [][]byte) error {
	ret := _m.Called(ctx, blockNumber, addrs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, [][]byte) error); ok {
		r0 = rf(ctx, blockNumber, addrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccounts provides a mock function with given fields: ctx, contractAddress, from, to
func (_m *Store) DeleteAccounts(ctx context.Context, contractAddress common.Address, from int64, to int64) error {
	ret := _m.Called(ctx, contractAddress, from, to)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, int64, int64) error); ok {
		r0 = rf(ctx, contractAddress, from, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTransfer provides a mock function with given fields: ctx, contractAddress, from, to
func (_m *Store) DeleteTransfer(ctx context.Context, contractAddress common.Address, from int64, to int64) error {
	ret := _m.Called(ctx, contractAddress, from, to)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, int64, int64) error); ok {
		r0 = rf(ctx, contractAddress, from, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAccount provides a mock function with given fields: ctx, contractAddress, address, blockNr
func (_m *Store) FindAccount(ctx context.Context, contractAddress common.Address, address common.Address, blockNr ...int64) (*model.Account, error) {
	_va := make([]interface{}, len(blockNr))
	for _i := range blockNr {
		_va[_i] = blockNr[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contractAddress, address)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *model.Account
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, common.Address, ...int64) *model.Account); ok {
		r0 = rf(ctx, contractAddress, address, blockNr...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, common.Address, common.Address, ...int64) error); ok {
		r1 = rf(ctx, contractAddress, address, blockNr...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllTransfers provides a mock function with given fields: ctx, contractAddress, address
func (_m *Store) FindAllTransfers(ctx context.Context, contractAddress common.Address, address common.Address) ([]*model.Transfer, error) {
	ret := _m.Called(ctx, contractAddress, address)

	var r0 []*model.Transfer
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, common.Address) []*model.Transfer); ok {
		r0 = rf(ctx, contractAddress, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Transfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, common.Address, common.Address) error); ok {
		r1 = rf(ctx, contractAddress, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindERC20 provides a mock function with given fields: ctx, address
func (_m *Store) FindERC20(ctx context.Context, address common.Address) (*model.ERC20, error) {
	ret := _m.Called(ctx, address)

	var r0 *model.ERC20
	if rf, ok := ret.Get(0).(func(context.Context, common.Address) *model.ERC20); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ERC20)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, common.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLatestAccounts provides a mock function with given fields: ctx, contractAddress, addrs
func (_m *Store) FindLatestAccounts(ctx context.Context, contractAddress common.Address, addrs [][]byte) ([]*model.Account, error) {
	ret := _m.Called(ctx, contractAddress, addrs)

	var r0 []*model.Account
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, [][]byte) []*model.Account); ok {
		r0 = rf(ctx, contractAddress, addrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, common.Address, [][]byte) error); ok {
		r1 = rf(ctx, contractAddress, addrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAccount provides a mock function with given fields: ctx, _a1
func (_m *Store) InsertAccount(ctx context.Context, _a1 *model.Account) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Account) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertERC20 provides a mock function with given fields: ctx, code
func (_m *Store) InsertERC20(ctx context.Context, code *model.ERC20) error {
	ret := _m.Called(ctx, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ERC20) error); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertTransfer provides a mock function with given fields: ctx, event
func (_m *Store) InsertTransfer(ctx context.Context, event *model.Transfer) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Transfer) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListERC20 provides a mock function with given fields: ctx
func (_m *Store) ListERC20(ctx context.Context) ([]*model.ERC20, error) {
	ret := _m.Called(ctx)

	var r0 []*model.ERC20
	if rf, ok := ret.Get(0).(func(context.Context) []*model.ERC20); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ERC20)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNewERC20 provides a mock function with given fields: ctx
func (_m *Store) ListNewERC20(ctx context.Context) ([]*model.ERC20, error) {
	ret := _m.Called(ctx)

	var r0 []*model.ERC20
	if rf, ok := ret.Get(0).(func(context.Context) []*model.ERC20); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ERC20)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOldERC20 provides a mock function with given fields: ctx
func (_m *Store) ListOldERC20(ctx context.Context) ([]*model.ERC20, error) {
	ret := _m.Called(ctx)

	var r0 []*model.ERC20
	if rf, ok := ret.Get(0).(func(context.Context) []*model.ERC20); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ERC20)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
