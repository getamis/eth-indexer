// Code generated by mockery v1.0.0
package mocks

import common "github.com/ethereum/go-ethereum/common"
import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/getamis/eth-indexer/model"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// BatchInsert provides a mock function with given fields: ctx, subs
func (_m *Store) BatchInsert(ctx context.Context, subs []*model.Subscription) ([]common.Address, error) {
	ret := _m.Called(ctx, subs)

	var r0 []common.Address
	if rf, ok := ret.Get(0).(func(context.Context, []*model.Subscription) []common.Address); ok {
		r0 = rf(ctx, subs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []*model.Subscription) error); ok {
		r1 = rf(ctx, subs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdateBlockNumber provides a mock function with given fields: ctx, blockNumber, addrs
func (_m *Store) BatchUpdateBlockNumber(ctx context.Context, blockNumber int64, addrs [][]byte) error {
	ret := _m.Called(ctx, blockNumber, addrs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, [][]byte) error); ok {
		r0 = rf(ctx, blockNumber, addrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, blockNumber
func (_m *Store) Find(ctx context.Context, blockNumber int64) ([]*model.Subscription, error) {
	ret := _m.Called(ctx, blockNumber)

	var r0 []*model.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.Subscription); ok {
		r0 = rf(ctx, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByGroup provides a mock function with given fields: ctx, groupID, query
func (_m *Store) FindByGroup(ctx context.Context, groupID int64, query *model.QueryParameters) ([]*model.Subscription, uint64, error) {
	ret := _m.Called(ctx, groupID, query)

	var r0 []*model.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, int64, *model.QueryParameters) []*model.Subscription); ok {
		r0 = rf(ctx, groupID, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Subscription)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, int64, *model.QueryParameters) uint64); ok {
		r1 = rf(ctx, groupID, query)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64, *model.QueryParameters) error); ok {
		r2 = rf(ctx, groupID, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindOldSubscriptions provides a mock function with given fields: ctx, addrs
func (_m *Store) FindOldSubscriptions(ctx context.Context, addrs [][]byte) ([]*model.Subscription, error) {
	ret := _m.Called(ctx, addrs)

	var r0 []*model.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte) []*model.Subscription); ok {
		r0 = rf(ctx, addrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, [][]byte) error); ok {
		r1 = rf(ctx, addrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTotalBalance provides a mock function with given fields: ctx, blockNumber, token, group
func (_m *Store) FindTotalBalance(ctx context.Context, blockNumber int64, token common.Address, group int64) (*model.TotalBalance, error) {
	ret := _m.Called(ctx, blockNumber, token, group)

	var r0 *model.TotalBalance
	if rf, ok := ret.Get(0).(func(context.Context, int64, common.Address, int64) *model.TotalBalance); ok {
		r0 = rf(ctx, blockNumber, token, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TotalBalance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, common.Address, int64) error); ok {
		r1 = rf(ctx, blockNumber, token, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertTotalBalance provides a mock function with given fields: ctx, data
func (_m *Store) InsertTotalBalance(ctx context.Context, data *model.TotalBalance) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.TotalBalance) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListOldSubscriptions provides a mock function with given fields: ctx, query
func (_m *Store) ListOldSubscriptions(ctx context.Context, query *model.QueryParameters) ([]*model.Subscription, uint64, error) {
	ret := _m.Called(ctx, query)

	var r0 []*model.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, *model.QueryParameters) []*model.Subscription); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Subscription)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, *model.QueryParameters) uint64); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *model.QueryParameters) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Reset provides a mock function with given fields: ctx, from, to
func (_m *Store) Reset(ctx context.Context, from int64, to int64) error {
	ret := _m.Called(ctx, from, to)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, from, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
