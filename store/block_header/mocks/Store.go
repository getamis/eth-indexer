// Code generated by mockery v1.0.0
package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/getamis/eth-indexer/model"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, from, to
func (_m *Store) Delete(ctx context.Context, from int64, to int64) error {
	ret := _m.Called(ctx, from, to)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, from, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindBlockByHash provides a mock function with given fields: ctx, hash
func (_m *Store) FindBlockByHash(ctx context.Context, hash []byte) (*model.Header, error) {
	ret := _m.Called(ctx, hash)

	var r0 *model.Header
	if rf, ok := ret.Get(0).(func(context.Context, []byte) *model.Header); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Header)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBlockByNumber provides a mock function with given fields: ctx, blockNumber
func (_m *Store) FindBlockByNumber(ctx context.Context, blockNumber int64) (*model.Header, error) {
	ret := _m.Called(ctx, blockNumber)

	var r0 *model.Header
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Header); ok {
		r0 = rf(ctx, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Header)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLatestBlock provides a mock function with given fields: ctx
func (_m *Store) FindLatestBlock(ctx context.Context) (*model.Header, error) {
	ret := _m.Called(ctx)

	var r0 *model.Header
	if rf, ok := ret.Get(0).(func(context.Context) *model.Header); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Header)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTd provides a mock function with given fields: ctx, hash
func (_m *Store) FindTd(ctx context.Context, hash []byte) (*model.TotalDifficulty, error) {
	ret := _m.Called(ctx, hash)

	var r0 *model.TotalDifficulty
	if rf, ok := ret.Get(0).(func(context.Context, []byte) *model.TotalDifficulty); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TotalDifficulty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, data
func (_m *Store) Insert(ctx context.Context, data *model.Header) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Header) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertTd provides a mock function with given fields: ctx, data
func (_m *Store) InsertTd(ctx context.Context, data *model.TotalDifficulty) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.TotalDifficulty) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
